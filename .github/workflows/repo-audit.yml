name: repo-audit
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday

concurrency:
  group: repo-audit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'npm' }
      
      - name: Create reports directory
        run: mkdir -p reports
        
      - name: Install dependencies
        run: npm ci
        
      - name: NPM Audit (production dependencies)
        run: |
          mkdir -p reports
          npm audit --production --audit-level=moderate --json > reports/npm-audit.json || true
          npm audit --production --audit-level=moderate > reports/npm-audit.txt || true
        continue-on-error: true
        
      - name: License check
        run: |
          mkdir -p reports
          npx license-checker --json > reports/licenses.json || true
          npx license-checker > reports/licenses.txt || true
        continue-on-error: true
        
      - name: Dependency check (unused/missing)
        run: |
          mkdir -p reports
          npx depcheck --json > reports/depcheck.json || true
          npx depcheck > reports/depcheck.txt || true
        continue-on-error: true
        
      - name: Security scan (ESLint security plugin)
        run: |
          mkdir -p reports
          npm run lint:security > reports/security-lint.txt || true
        continue-on-error: true
        
      - name: Bundle analysis
        run: |
          mkdir -p reports
          npm run build > reports/build-analysis.txt 2>&1 || true
        continue-on-error: true
        
      - name: Generate audit summary
        run: |
          echo "# Repository Audit Summary" > reports/audit-summary.md
          echo "Generated on: $(date)" >> reports/audit-summary.md
          echo "" >> reports/audit-summary.md
          
          echo "## NPM Vulnerabilities" >> reports/audit-summary.md
          if [ -f reports/npm-audit.txt ]; then
            if grep -q "found 0 vulnerabilities" reports/npm-audit.txt; then
              echo "✅ No vulnerabilities found" >> reports/audit-summary.md
            else
              echo "⚠️ Vulnerabilities detected:" >> reports/audit-summary.md
              echo "\`\`\`" >> reports/audit-summary.md
              tail -10 reports/npm-audit.txt >> reports/audit-summary.md
              echo "\`\`\`" >> reports/audit-summary.md
            fi
          fi
          echo "" >> reports/audit-summary.md
          
          echo "## Dependency Check" >> reports/audit-summary.md
          if [ -f reports/depcheck.txt ]; then
            if grep -q "No depcheck issue" reports/depcheck.txt; then
              echo "✅ No unused dependencies" >> reports/audit-summary.md
            else
              echo "⚠️ Dependency issues detected - see full report" >> reports/audit-summary.md
            fi
          fi
          echo "" >> reports/audit-summary.md
          
          echo "## Security Lint" >> reports/audit-summary.md
          if [ -f reports/security-lint.txt ]; then
            if ! grep -q "warning\|error" reports/security-lint.txt; then
              echo "✅ No security warnings" >> reports/audit-summary.md
            else
              echo "⚠️ Security warnings detected - see full report" >> reports/audit-summary.md
            fi
          fi
          
      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit-artifacts
          path: reports/
          
      - name: Comment audit summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '### Repository Audit Results\n\n';
            
            if (fs.existsSync('reports/audit-summary.md')) {
              const auditSummary = fs.readFileSync('reports/audit-summary.md', 'utf8');
              summary += auditSummary;
            } else {
              summary += 'Audit completed but summary generation failed.';
            }
            
            summary += '\n\n_Full audit reports available in artifacts: **audit-artifacts**_';
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary
            });

  triage:
    runs-on: ubuntu-latest
    needs: audit
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download audit artifacts
        uses: actions/download-artifact@v4
        with:
          name: audit-artifacts
          path: reports/
          
      - name: Triage security issues
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const has = p => fs.existsSync(p);
            
            try {
              // Check if files exist before processing
              if (!has('reports/npm-audit.json')) {
                console.log('No npm-audit.json found, skipping triage');
                return;
              }
              
              const auditData = JSON.parse(fs.readFileSync('reports/npm-audit.json', 'utf8'));
              
              if (auditData.vulnerabilities) {
                for (const [name, vuln] of Object.entries(auditData.vulnerabilities)) {
                  if (vuln.severity === 'high' || vuln.severity === 'critical') {
                    const title = `Security: ${vuln.severity} vulnerability in ${name}`;
                    
                    try {
                      // Check if issue already exists (de-duplicate by title)
                      const existingIssues = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open',
                        labels: 'security'
                      });
                      
                      const exists = existingIssues.data.some(issue => issue.title === title);
                      
                      if (!exists) {
                        await github.rest.issues.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: title,
                          body: `**Vulnerability Details:**\n- Package: ${name}\n- Severity: ${vuln.severity}\n- Via: ${vuln.via}\n\nFound during automated repository audit.`,
                          labels: ['security', 'audit']
                        });
                        console.log(`Created issue for ${name} (${vuln.severity})`);
                      } else {
                        console.log(`Issue already exists for ${name} (${vuln.severity})`);
                      }
                    } catch (apiError) {
                      // Handle rate limiting gracefully
                      if (apiError.status === 403 && apiError.message.includes('rate limit')) {
                        console.log('Rate limited, skipping remaining issue creation');
                        return;
                      }
                      console.log(`Error creating issue for ${name}:`, apiError.message);
                    }
                  }
                }
              }
            } catch (error) {
              console.log('Error processing audit data:', error.message);
              return;
            }