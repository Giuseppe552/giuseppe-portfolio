name: zap-baseline
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: zap-${{ github.ref }}
  cancel-in-progress: true

jobs:
  zap:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Detect target URL
        id: target
        run: |
          # Try to detect PR Preview URL from Vercel deployments
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For now, fallback to production URL since we don't have Vercel token access
            # In future, could parse PR timeline for deployment status
            echo "target_url=https://giuseppegiona.com" >> $GITHUB_OUTPUT
          else
            echo "target_url=https://giuseppegiona.com" >> $GITHUB_OUTPUT
          fi
          
      - name: Check target availability
        id: precheck
        run: |
          target_url="${{ steps.target.outputs.target_url }}"
          echo "Checking availability of: $target_url"
          
          status_code=$(curl -o /dev/null -s -w "%{http_code}" --max-time 30 "$target_url" || echo "000")
          echo "HTTP status: $status_code"
          
          if [[ "$status_code" =~ ^[23][0-9][0-9]$ ]]; then
            echo "available=true" >> $GITHUB_OUTPUT
            echo "status_code=$status_code" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT  
            echo "status_code=$status_code" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment on PR if target unavailable
        if: github.event_name == 'pull_request' && steps.precheck.outputs.available == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### ZAP Scan Skipped
              
              Target not reachable: ${{ steps.target.outputs.target_url }}
              HTTP code: ${{ steps.precheck.outputs.status_code }}
              
              The security scan was skipped because the target URL is not responding.`
            });
            
      - name: Run ZAP Baseline Scan
        if: steps.precheck.outputs.available == 'true'
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ steps.target.outputs.target_url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -T 120'
        continue-on-error: true
          
      - name: Upload ZAP report
        if: steps.precheck.outputs.available == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
          
      - name: Comment ZAP results
        if: github.event_name == 'pull_request' && steps.precheck.outputs.available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '### ZAP Security Scan Results\n\n';
            
            try {
              // Try to parse the HTML report for alert counts (basic parsing)
              const reportContent = fs.readFileSync('report_html.html', 'utf8');
              
              // Simple regex to extract alert counts (this is basic - real implementation would be more robust)
              const highMatch = reportContent.match(/High.*?(\d+)/i);
              const mediumMatch = reportContent.match(/Medium.*?(\d+)/i);  
              const lowMatch = reportContent.match(/Low.*?(\d+)/i);
              const infoMatch = reportContent.match(/Informational.*?(\d+)/i);
              
              summary += `**Target:** ${{ steps.target.outputs.target_url }}\n\n`;
              summary += `**Alert Summary:**\n`;
              summary += `- High: ${highMatch ? highMatch[1] : '0'}\n`;
              summary += `- Medium: ${mediumMatch ? mediumMatch[1] : '0'}\n`;  
              summary += `- Low: ${lowMatch ? lowMatch[1] : '0'}\n`;
              summary += `- Informational: ${infoMatch ? infoMatch[1] : '0'}\n\n`;
              
            } catch (err) {
              summary += 'Scan completed but report parsing failed.\n\n';
            }
            
            summary += '_Full HTML report available in artifacts: **zap-report**_';
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary
            });
