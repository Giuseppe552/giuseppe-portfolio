name: zap-baseline
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  # one slot per PR or branch, no cross-job deadlock
  group: zap-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  zap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Resolve target URL
        id: target
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "url=https://giuseppegiona.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://giuseppegiona.com" >> $GITHUB_OUTPUT
          fi

      - name: Precheck target
        run: |
          set +e
          code=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.target.outputs.url }}")
          echo "HTTP $code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 400 ]; then
            echo "ZAP skipped: target unreachable (HTTP $code)" | tee zap-summary.txt
            exit 0
          fi

      - name: ZAP Baseline
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ steps.target.outputs.url }}
          cmd_options: "-a -T 120"
        continue-on-error: true

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            zap*.log
          if-no-files-found: warn

      - name: Summarize (always neutral)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = 'ZAP completed. See artifact.\n';
            try {
              const log = fs.readFileSync('report_html.html','utf8');
              const counts = { High: 0, Medium: 0, Low: 0, Informational: 0 };
              // naive scrape as a fallback; real parser not required
              for (const sev of Object.keys(counts)) {
                const m = log.match(new RegExp(`${sev}`, 'g'));
                if (m) counts[sev] = m.length; // best-effort
              }
              summary += `\nHigh: ${counts.High}\nMedium: ${counts.Medium}\nLow: ${counts.Low}\nInformational: ${counts.Informational}\n`;
            } catch(e) {
              summary += '\n(No HTML report to parse.)\n';
            }
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: 'ZAP Security Scan Results (neutral)\n\n' + summary
              });
            }
            // Always exit 0 to keep job green
            console.log(summary);
            return;
